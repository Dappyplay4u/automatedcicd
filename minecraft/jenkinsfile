pipeline {
    agent any
  
    environment {
        WORKSPACE = "${env.WORKSPACE}"
        AWS_DEFAULT_REGION = "us-east-1"
        DOCKER_IMAGE_NAME = 'minecraft-server'
        DOCKER_IMAGE_TAG = 'minecraft'
    }

    tools {
        terraform 'terraform'
        maven 'localMaven'
        jdk 'localJdk'
    }

    stages {
        stage('Git Checkout') {
            steps {
                echo 'Cloning the application code...'
                git branch: 'master', url: 'https://github.com/Dappyplay4u/automatedcicd.git'
            }
        }

        stage('Create EKS Cluster') {
            steps {
                script {
                    dir('eks-blueprint/k8s-minecraft') {
                        sh 'terraform init'
                        sh 'terraform fmt'
                        sh 'terraform validate'
                        sh 'terraform plan -out=tfplan'
                        stash includes: 'tfplan', name: 'terraform-plan'
                    }
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: 'eks-blueprint/k8s-minecraft/tfplan', onlyIfSuccessful: true
                }
            }
        }

        stage('Approval') {
            steps {
                input "Please review the Terraform plan and click 'Proceed' to apply it"
            }
        }

        stage('Apply') {
            steps {
                script {
                    dir('eks-blueprint/k8s-minecraft') {
                        unstash 'terraform-plan'
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Build and Test') {
            steps {
                sh 'cd minecraft && mvn -U clean package'
            }
        }

        stage('Unit Test') {
            steps {
                sh 'cd minecraft && mvn test'
            }
        }

        stage('Integration Test') {
            steps {
                sh 'cd minecraft && mvn verify -DskipUnitTests'
            }
        }

        stage('Checkstyle Code Analysis') {
            steps {
                sh 'cd minecraft && mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://44.202.0.48:9000/"
            }
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd minecraft && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Upload Artifact to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', passwordVariable: 'PASSWORD', usernameVariable: 'USER_NAME')]) {
                    sh "sed -i \"s/.*<username><\\/username>/<username>$USER_NAME<\\/username>/g\" ${WORKSPACE}/nexus-setup/settings.xml"
                    sh "sed -i \"s/.*<password><\\/password>/<password>$PASSWORD<\\/password>/g\" ${WORKSPACE}/nexus-setup/settings.xml"
                    sh 'sudo cp ${WORKSPACE}/nexus-setup/settings.xml /var/lib/jenkins/.m2'
                    sh 'cd minecraft && mvn clean deploy -DskipTests'
                }
            }
        }
    stages {
        stage('Build and Push Docker Image') {
            steps {
                script {
                    
                    Docker.WithRegistry('https://registry.hub.docker.com', credentialsId: 'docker' , toolName: 'docker') {
                        sh "docker build -t minecraft-server:minecraft"
                        sh "docker push dappyplay4u/minecraft:minecraft"
                    }
                }
            }
            stage('Deploy to container') {
                steps {
                    sh 'docker run -d --name minecraft-server -p 8081:80 ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}'
                }
            }
        }

        // ... (Other stages)

        stage('Install kubectl') {
            steps {
                sh '''
                    # Specify the kubectl version
                    KUBECTL_VERSION="v1.24.0"

                    # Download kubectl binary
                    curl -LO "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"

                    # Make the kubectl binary executable
                    sudo chmod +x kubectl

                    # Move kubectl binary to a directory in the PATH
                    sudo mv kubectl /usr/local/bin/
                '''
            }
        }

        stage('Deploy to EKS') {
            environment {
                region = 'us-east-1'
                clusterName = 'minecraft-server'
            }
            steps {
                script {
                    sh "sed -i 's/replaceImageTag/${BUILD_NUMBER}/g' minecraft/minecraft-deployment.yaml"
                    dir('k8s-manifests') {
                        sh "aws eks update-kubeconfig --name ${clusterName} --region ${region}"
                        sh "kubectl apply -f ."
                    }
                }
            }
        }

        stage('Approval for Terraform Destroy') {
            steps {
                input "Do you want to Proceed to destroy Terraform resources"
            }
        }

        stage('Destroy') {
            steps {
                script {
                    dir('eks-blueprint/k8s-minecraft') {
                        unstash 'terraform-plan'
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
